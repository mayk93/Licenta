ctheano.compile.function_module
_constructor_Function
p0
(ctheano.compile.function_module
_constructor_FunctionMaker
p1
((dp2
S'profile'
p3
NsS'function_builder'
p4
ctheano.compile.function_module
Function
p5
sS'inputs'
p6
(lp7
ccopy_reg
_reconstructor
p8
(ctheano.compile.io
In
p9
c__builtin__
object
p10
Ntp11
Rp12
(dp13
S'name'
p14
NsS'update'
p15
NsS'value'
p16
NsS'borrow'
p17
NsS'strict'
p18
I00
sS'implicit'
p19
I00
sS'mutable'
p20
I00
sS'variable'
p21
g8
(ctheano.tensor.var
TensorVariable
p22
g10
Ntp23
Rp24
(dp25
S'auto_name'
p26
S'auto_3'
p27
sS'index'
p28
NsS'tag'
p29
(itheano.gof.utils
scratchpad
p30
(dp31
S'trace'
p32
(lp33
(lp34
(S'/Library/Python/2.7/site-packages/django/contrib/staticfiles/handlers.py'
p35
I63
S'__call__'
p36
S'return self.application(environ, start_response)'
p37
tp38
a(S'/Library/Python/2.7/site-packages/django/core/handlers/wsgi.py'
p39
I177
g36
S'response = self.get_response(request)'
p40
tp41
a(S'/Library/Python/2.7/site-packages/django/core/handlers/base.py'
p42
I147
S'get_response'
p43
S'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
p44
tp45
a(S'/Library/Python/2.7/site-packages/django/views/decorators/csrf.py'
p46
I58
S'wrapped_view'
p47
S'return view_func(*args, **kwargs)'
p48
tp49
a(S'/Users/Michael/Documents/GitHub/GitHubRepos/Licenta/licenta/licenta/views.py'
p50
I36
S'process_image_open_theano'
p51
S'result = theano_tests.process(image_manager.temp_path)'
p52
tp53
a(S'/Users/Michael/Documents/GitHub/GitHubRepos/Licenta/licenta/licenta/tests/theano_tests.py'
p54
I70
S'process'
p55
S'draft(file_path)'
p56
tp57
a(S'/Users/Michael/Documents/GitHub/GitHubRepos/Licenta/licenta/licenta/custom_decorators/custom.py'
p58
I7
S'wrapper'
p59
S'function(*args)'
p60
tp61
a(S'/Users/Michael/Documents/GitHub/GitHubRepos/Licenta/licenta/licenta/tests/theano_tests.py'
p62
I26
S'draft'
p63
S'a = T.scalar()'
p64
tp65
aasbsg14
NsS'owner'
p66
NsS'type'
p67
g8
(ctheano.tensor.type
TensorType
p68
g10
Ntp69
Rp70
(dp71
S'broadcastable'
p72
(tsS'dtype'
p73
S'float64'
p74
sS'numpy_dtype'
p75
cnumpy
dtype
p76
(S'f8'
p77
I0
I1
tp78
Rp79
(I3
S'<'
p80
NNNI-1
I-1
I0
tp81
bsS'sparse_grad'
p82
I00
sg14
NsbsbsS'shared'
p83
I00
sS'allow_downcast'
p84
Nsbag8
(g9
g10
Ntp85
Rp86
(dp87
g14
Nsg15
Nsg16
Nsg17
Nsg18
I00
sg19
I00
sg20
I00
sg21
g8
(g22
g10
Ntp88
Rp89
(dp90
g26
S'auto_4'
p91
sg28
Nsg29
(itheano.gof.utils
scratchpad
p92
(dp93
g32
(lp94
(lp95
(g35
I63
g36
S'return self.application(environ, start_response)'
p96
tp97
a(g39
I177
g36
S'response = self.get_response(request)'
p98
tp99
a(g42
I147
g43
S'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
p100
tp101
a(g46
I58
g47
S'return view_func(*args, **kwargs)'
p102
tp103
a(g50
I36
g51
S'result = theano_tests.process(image_manager.temp_path)'
p104
tp105
a(g54
I70
g55
S'draft(file_path)'
p106
tp107
a(g58
I7
g59
S'function(*args)'
p108
tp109
a(g62
I27
g63
S'b = T.scalar()'
p110
tp111
aasbsg14
Nsg66
Nsg67
g8
(g68
g10
Ntp112
Rp113
(dp114
g72
(tsg73
g74
sg75
g79
sg82
I00
sg14
Nsbsbsg83
I00
sg84
NsbasS'fgraph'
p115
g8
(ctheano.gof.fg
FunctionGraph
p116
g10
Ntp117
Rp118
(dp119
g3
Nsg6
(lp120
g8
(g22
g10
Ntp121
Rp122
(dp123
g28
Nsg14
Nsg115
g118
sS'clients'
p124
(lp125
(g8
(ctheano.gof.graph
Apply
p126
g10
Ntp127
Rp128
(dp129
g6
(lp130
g122
ag8
(g22
g10
Ntp131
Rp132
(dp133
g28
Nsg14
Nsg115
g118
sg124
(lp134
(g128
I1
tp135
asg26
S'auto_11'
p136
sg29
(itheano.gof.utils
scratchpad
p137
(dp138
g32
g94
sbsg66
Nsg67
g113
sbasg29
(itheano.gof.utils
scratchpad
p139
(dp140
bsS'deps'
p141
(dp142
sg115
g118
sS'outputs'
p143
(lp144
g8
(g22
g10
Ntp145
Rp146
(dp147
g28
I0
sg14
Nsg115
g118
sg124
(lp148
(S'output'
p149
I0
tp150
asg26
S'auto_12'
p151
sg29
(itheano.gof.utils
scratchpad
p152
(dp153
g32
(lp154
(lp155
(g35
I63
g36
S'return self.application(environ, start_response)'
p156
tp157
a(g39
I177
g36
S'response = self.get_response(request)'
p158
tp159
a(g42
I147
g43
S'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
p160
tp161
a(g46
I58
g47
S'return view_func(*args, **kwargs)'
p162
tp163
a(g50
I36
g51
S'result = theano_tests.process(image_manager.temp_path)'
p164
tp165
a(g54
I70
g55
S'draft(file_path)'
p166
tp167
a(g58
I7
g59
S'function(*args)'
p168
tp169
a(g62
I30
g63
S'y = a * b'
p170
tp171
aasbsg66
g128
sg67
g8
(g68
g10
Ntp172
Rp173
(dp174
g72
(tsg73
g74
sg75
g79
sg82
I00
sg14
NsbsbasS'op'
p175
g8
(ctheano.tensor.elemwise
Elemwise
p176
g10
Ntp177
Rp178
(dp179
S'__module__'
p180
S'tensor'
p181
sS'scalar_op'
p182
g8
(ctheano.scalar.basic
Mul
p183
g10
Ntp184
Rp185
(dp186
S'output_types_preference'
p187
ctheano.scalar.basic
upcast_out
p188
sS'_op_use_c_code'
p189
S'/usr/bin/clang++'
p190
sg14
S'mul'
p191
sbsg14
S'Elemwise{mul,no_inplace}'
p192
sg189
g190
sS'destroy_map'
p193
(dp194
sS'nfunc_spec'
p195
(S'multiply'
p196
I2
I1
tp197
sS'inplace_pattern'
p198
(dp199
sS'openmp'
p200
I00
sS'__doc__'
p201
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p202
sbsbI0
tp203
asg26
S'auto_10'
p204
sg29
(itheano.gof.utils
scratchpad
p205
(dp206
g32
g33
sbsg66
Nsg67
g70
sbag132
asS'change_tracker'
p207
(itheano.gof.opt
ChangeTracker
p208
(dp209
S'changed'
p210
I00
sS'nb_imported'
p211
I0
sbsg143
(lp212
g146
asS'update_mapping'
p213
(dp214
sS'merge_feature'
p215
g8
(ctheano.gof.opt
MergeFeature
p216
g10
Ntp217
Rp218
(dp219
S'scheduled'
p220
(lp221
sS'nodes_seen'
p222
c__builtin__
set
p223
((lp224
g128
atp225
Rp226
sS'const_sig_inv'
p227
(itheano.gof.opt
_metadict
p228
(dp229
S'd'
p230
(dp231
sS'l'
p232
(lp233
sbsS'noinput_nodes'
p234
g8
(ctheano.misc.ordered_set
OrderedSet
p235
g10
Ntp236
Rp237
(dp238
S'_OrderedSet__root'
p239
g8
(ctheano.misc.ordered_set
Link
p240
g10
Ntp241
Rp242
(lp243
g242
ag242
absS'_OrderedSet__map'
p244
(dp245
sbsS'blacklist'
p246
(lp247
sS'seen_constants'
p248
g223
((lp249
tp250
Rp251
sS'const_sig'
p252
(itheano.gof.opt
_metadict
p253
(dp254
g230
(dp255
sg232
(lp256
sbsbsS'destroy_handler'
p257
g8
(ctheano.gof.destroyhandler
DestroyHandler
p258
g10
Ntp259
Rp260
(dp261
S'impact'
p262
(dp263
sS'droot'
p264
(dp265
sS'view_o'
p266
ccollections
OrderedDict
p267
((lp268
tp269
Rp270
sS'view_i'
p271
g267
((lp272
tp273
Rp274
sg115
g118
sS'do_imports_on_attach'
p275
I01
sg124
g267
((lp276
(lp277
g122
ag267
((lp278
(lp279
g128
aI1
aatp280
Rp281
aa(lp282
g132
ag267
((lp283
(lp284
g128
aI1
aatp285
Rp286
aa(lp287
g146
ag267
((lp288
tp289
Rp290
aa(lp291
g8
(g22
g10
Ntp292
Rp293
(dp294
g28
I0
sg14
Nsg115
g118
sg124
(lp295
sg26
S'auto_16'
p296
sg29
(itheano.gof.utils
scratchpad
p297
(dp298
g32
(lp299
sbsg66
g8
(g126
g10
Ntp300
Rp301
(dp302
g6
(lp303
g146
asg115
g118
sg143
(lp304
g293
asg29
(itheano.gof.utils
scratchpad
p305
(dp306
bsg141
(dp307
sg175
g8
(ctheano.compile.ops
OutputGuard
p308
g10
Ntp309
Rp310
(dp311
g189
g190
sbsbsg67
g173
sbag267
((lp312
tp313
Rp314
aatp315
Rp316
sS'root_destroyer'
p317
(dp318
sS'debug_all_apps'
p319
g8
(g235
g10
Ntp320
Rp321
(dp322
g239
g8
(g240
g10
Ntp323
Rp324
(lp325
g8
(g240
g10
Ntp326
Rp327
(lp328
g324
ag324
ag128
abag327
absg244
(dp329
g128
g327
ssbsS'destroyers'
p330
g8
(g235
g10
Ntp331
Rp332
(dp333
g239
g8
(g240
g10
Ntp334
Rp335
(lp336
g335
ag335
absg244
(dp337
sbsS'stale_droot'
p338
I00
sbsg14
S'/Users/Michael/Documents/GitHub/GitHubRepos/Licenta/licenta/licenta/tests/theano_tests.py:36'
p339
sS'execute_callbacks_time'
p340
F0.00021123886108398438
sS'shape_feature'
p341
g8
(ctheano.tensor.opt
ShapeFeature
p342
g10
Ntp343
Rp344
(dp345
g220
(dp346
sS'shape_of'
p347
(dp348
g132
(tsg293
(tsg122
(tsg146
(tssS'lscalar_one'
p349
g8
(ctheano.tensor.var
TensorConstant
p350
g10
Ntp351
Rp352
(dp353
g26
S'auto_13'
p354
sg28
Nsg29
(itheano.gof.utils
scratchpad
p355
(dp356
S'unique_value'
p357
Nsbsg14
Nsg67
g8
(g68
g10
Ntp358
Rp359
(dp360
g72
(tsg73
S'int64'
p361
sg75
g76
(S'i8'
p362
I0
I1
tp363
Rp364
(I3
S'<'
p365
NNNI-1
I-1
I0
tp366
bsg82
I00
sg14
NsbsS'data'
p367
cnumpy.core.multiarray
_reconstruct
p368
(cnumpy
ndarray
p369
(I0
tp370
S'b'
p371
tp372
Rp373
(I1
(tg364
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p374
tp375
bsbsS'shape_of_reverse_index'
p376
(dp377
g146
g223
((lp378
tp379
Rp380
sg293
g223
((lp381
tp382
Rp383
ssbsS'apply_nodes'
p384
g223
((lp385
g128
atp386
Rp387
sS'variables'
p388
g223
((lp389
g132
ag122
ag146
atp390
Rp391
sS'_features'
p392
(lp393
g8
(ctheano.gof.toolbox
ReplaceValidate
p394
g10
Ntp395
Rp396
(dp397
S'fail_validate'
p398
I00
sS'_nodes_removed'
p399
g223
((lp400
tp401
Rp402
sba(itheano.compile.function_module
Supervisor
p403
(dp404
S'protected'
p405
(lp406
g122
ag132
asbag8
(ctheano.gof.toolbox
PreserveVariableAttributes
p407
g10
Ntp408
Rp409
ag218
ag344
ag260
asbsg143
g8
(ctheano.compile.io
SymbolicOutput
p410
g10
Ntp411
Rp412
(dp413
g21
g8
(g22
g10
Ntp414
Rp415
(dp416
g26
S'auto_9'
p417
sg28
I0
sg29
(itheano.gof.utils
scratchpad
p418
(dp419
g32
g154
sbsg14
Nsg66
g8
(g126
g10
Ntp420
Rp421
(dp422
g6
(lp423
g24
ag89
asg29
(itheano.gof.utils
scratchpad
p424
(dp425
bsg143
(lp426
g415
asg175
g178
sbsg67
g173
sbsg17
I00
sbsS'on_unused_input'
p427
NsS'accept_inplace'
p428
I00
sS'mode'
p429
g8
(ctheano.compile.mode
Mode
p430
g10
Ntp431
Rp432
(S'cvm'
p433
g8
(ctheano.gof.optdb
Query
p434
g10
Ntp435
Rp436
(dp437
g14
S'OPT_FAST_RUN'
p438
sS'require'
p439
g8
(g235
g10
Ntp440
Rp441
(dp442
g239
g8
(g240
g10
Ntp443
Rp444
(lp445
g444
ag444
absg244
(dp446
sbsS'subquery'
p447
(dp448
sS'position_cutoff'
p449
NsS'exclude'
p450
g8
(g235
g10
Ntp451
Rp452
(dp453
g239
g8
(g240
g10
Ntp454
Rp455
(lp456
g455
ag455
absg244
(dp457
sbsS'include'
p458
g8
(g235
g10
Ntp459
Rp460
(dp461
g239
g8
(g240
g10
Ntp462
Rp463
(lp464
g8
(g240
g10
Ntp465
Rp466
(lp467
g463
ag463
aS'fast_run'
p468
abag466
absg244
(dp469
g468
g466
ssbsS'extra_optimizations'
p470
(lp471
sbtp472
bstp473
Rp474
(lp475
g8
(ctheano.gof.link
Container
p476
g10
Ntp477
Rp478
(dp479
S'provided'
p480
I0
sg14
NsS'required'
p481
I01
sS'storage'
p482
(lp483
Nasg19
I00
sg18
I00
sS'readonly'
p484
I00
sg67
g70
sg84
Nsbag8
(g476
g10
Ntp485
Rp486
(dp487
g480
I0
sg14
Nsg481
I01
sg482
(lp488
Nasg19
I00
sg18
I00
sg484
I00
sg67
g113
sg84
Nsba(lp489
NaNatp490
Rp491
.